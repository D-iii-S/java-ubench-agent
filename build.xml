<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2014 Charles University in Prague
  - Copyright 2014 Vojtech Horky
  - 
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  -     http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -->
<project basedir="." name="Microbenchmarking agent" default="compile">
	<property file="local-settings.ini" />
	
	<property environment="env" />

	<property name="java.src.dir" value="src/java" />
	<property name="agent.src.dir" value="src/c" />
	<property name="java.test.src.dir" value="src/test-java" />

	<property name="build.dir" location="out" />
	<property name="classes.build.dir" location="${build.dir}/classes" />
	<property name="test.classes.build.dir" location="${build.dir}/test-classes" />
	<property name="agent.build.dir" location="${build.dir}/agent/" />
	
	<property name="agent.cc" value="gcc" />
	
	
	<!--
		Determine features (capabilities) of the agent based
		on available libraries or on which platform we are
		operating.
	-->
	<condition property="agent.feature.has.papi">
		<and>
			<os family="unix" />
			<available file="libpapi.so" filepath="/usr/lib" />
		</and>
	</condition>
	<condition property="agent.feature.has.getrusage">
		<os name="Linux" />
	</condition>
	<condition property="agent.feature.has.timespec">
		<os name="Linux" />
	</condition>
	
	
	
	<!--
		Prepare some compiler/linker settings.
	-->
	<property name="agent.cc.warnings" value="diagnostic" />
	
	<!-- Helper properties to check for compiler -->
	<condition property="agent.cc.is.gcc">
		<equals arg1="${agent.cc}" arg2="gcc" />
	</condition>
	<condition property="agent.cc.is.msvc">
		<equals arg1="${agent.cc}" arg2="msvc" />
	</condition>
		
	
	<!-- Agent file naming -->
	<condition property="agent.filename" value="libubench-agent.so">
		<os family="unix" />
	</condition>
	<condition property="agent.filename" value="ubench-agent.dll">
		<os family="windows" />
	</condition>
	<property name="agent.path"
		location="${agent.build.dir}${file.separator}${agent.filename}" />
	
	<!-- Java include paths -->
	<property name="agent.cc.java.include"
		location="${env.JAVA_HOME}${file.separator}include" />
	<condition property="agent.cc.java.os.include"
			value="${env.JAVA_HOME}${file.separator}include${file.separator}linux">
		<os name="Linux" />
	</condition>
	<condition property="agent.cc.java.os.include"
			value="${env.JAVA_HOME}${file.separator}include${file.separator}win32">
		<os family="windows" />
	</condition>
	
	<!-- PAPI support -->
	<condition property="agent.link.papi" value="-lpapi" else="">
		<isset property="agent.feature.has.papi" />
	</condition>
	<condition property="agent.cc.papi" value="-DHAS_PAPI" else="">
		<isset property="agent.feature.has.papi" />
	</condition>
	<condition property="agent.cc.getrusage" value="-DHAS_GETRUSAGE" else="">
		<isset property="agent.feature.has.getrusage" />
	</condition>
	<condition property="agent.cc.timespec" value="-DHAS_TIMESPEC" else="">
		<isset property="agent.feature.has.timespec" />
	</condition>	
	
	<!-- Warning-related compiler flags -->
	<condition property="agent.gcc.warn.flags" value="-Wall -Wextra">
		<equals arg1="${agent.cc.warnings}" arg2="diagnostic" />
	</condition>
	<condition property="agent.gcc.warn.flags" value="-Wall">
		<equals arg1="${agent.cc.warnings}" arg2="default" />
	</condition>
	<condition property="agent.gcc.warn.flags" value="-Wall -Wextra -Werror">
		<equals arg1="${agent.cc.warnings}" arg2="aserror" />
	</condition>
	<property name="agent.gcc.warn.flags" value="" />
	
	<condition property="agent.msvc.warn.flags" value="/Wall">
		<equals arg1="${agent.cc.warnings}" arg2="diagnostic" />
	</condition>
	<condition property="agent.msvc.warn.flags" value="/W3">
		<equals arg1="${agent.cc.warnings}" arg2="default" />
	</condition>
	<condition property="agent.msvc.warn.flags" value="/Wall /WX">
		<equals arg1="${agent.cc.warnings}" arg2="aserror" />
	</condition>
	<property name="agent.msvc.warn.flags" value="" />
	
	
	<target name="print-properties">
		<echoproperties format="text" />
	</target>

	<target name="compile" depends="compile-java,compile-agent">
	</target>

	<target name="compile-java">
		<mkdir dir="${classes.build.dir}" />
		<javac 
				destdir="${classes.build.dir}"
				debug="true"
				includeantruntime="false">
			<src path="${java.src.dir}" />
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<target name="compile-agent" depends="compile-java,compile-agent-gcc,compile-agent-msvc">
	</target>
	
	<target name="compile-agent-prepare-headers" depends="compile-java">
		<mkdir dir="${agent.build.dir}" />
		<javah
				destdir="${agent.build.dir}"
				classpath="${classes.build.dir}">
			<class name="cz.cuni.mff.d3s.perf.CompilationCounter" />
			<class name="cz.cuni.mff.d3s.perf.Benchmark" />
			<class name="cz.cuni.mff.d3s.perf.OverheadEstimations" />
		</javah>
	</target>
	
	<target name="compile-agent-gcc" depends="compile-agent-prepare-headers" if="agent.cc.is.gcc">
		<apply
				executable="gcc"
				failonerror="true"
				dest="${agent.build.dir}"
				parallel="false"
				verbose="true">
			<arg value="-c" />
			<arg value="-I${agent.build.dir}" />
			<arg value="-I${agent.cc.java.include}" />
			<arg value="-I${agent.cc.java.os.include}" />
			<arg value="-fPIC" />
			<arg line="${agent.cc.papi}" />
			<arg line="${agent.cc.getrusage}" />
			<arg line="${agent.cc.timespec}" />
			<arg line="${agent.gcc.warn.flags}" />
			<arg value="-o"/>
			<targetfile />
			<srcfile />
			<fileset dir="${agent.src.dir}" includes="*.c" />
			<mapper type="glob" from="*.c" to="*.o" />
		</apply>
		<!-- FIXME: do not link when everything is up to date. -->
		<apply
				executable="gcc"
				failonerror="true"
				parallel="true"
				verbose="true">
			<arg value="-shared" />
			<arg value="-fPIC" />
			<arg line="${agent.link.papi}" />
			<arg value="-o" />
			<arg file="${agent.path}" />
			<srcfile />
			<fileset dir="${agent.build.dir}" includes="*.o" />
		</apply>
	</target>
	
	<target name="compile-agent-msvc" depends="compile-agent-prepare-headers" if="agent.cc.is.msvc">
		<apply
				executable="cl.exe"
				failonerror="true"
				dest="${agent.build.dir}"
				parallel="false"
				verbose="true">
			<arg value="/c" />
			<arg value="/I${agent.build.dir}" />
			<arg value="/I${agent.cc.java.include}" />
			<arg value="/I${agent.cc.java.os.include}" />
			<arg line="${agent.msvc.warn.flags}" />
			<arg value="/Fo${agent.build.dir}${file.separator}"/>
			<arg value="/TC" />
			<srcfile />
			<fileset dir="${agent.src.dir}" includes="*.c" />
			<mapper type="glob" from="*.c" to="*.obj" />
		</apply>
		<!-- FIXME: do not link when everything is up to date. -->
		<apply
				executable="link.exe"
				failonerror="true"
				parallel="true"
				verbose="true">
			<arg value="/DLL" />
			<arg line="/DEF:${agent.src.dir}${file.separator}agent.def" />
			<arg value="/OUT:${agent.path}" />
			<srcfile />
			<fileset dir="${agent.build.dir}" includes="*.obj" />
		</apply>
	</target>

	<target name="compile-test">
		<mkdir dir="${test.classes.build.dir}" />
		<javac 
				destdir="${test.classes.build.dir}"
				debug="true"
				includeantruntime="false">
			<src path="${java.test.src.dir}" />
			<classpath>
				<pathelement path="${classes.build.dir}" />
			</classpath>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<macrodef name="self-test">
		<attribute name="classname" default="mixed" />
		<attribute name="jvmarg" default="-Xmixed" />
		<attribute name="progarg" default="mixed" />
			
		<sequential>
			<java
					classname="@{classname}"
					fork="true"
					failonerror="true">
				<classpath>
					<pathelement path="${classes.build.dir}" />
					<pathelement path="${test.classes.build.dir}" />
				</classpath>
				<jvmarg value="-agentpath:${agent.path}" />
				<jvmarg value="@{jvmarg}" />
				<arg value="@{progarg}" />
			</java>
		</sequential>
	</macrodef>

	<target name="test" depends="compile,compile-test">
		<self-test
			classname="cz.cuni.mff.d3s.perf.CompilationCounterTest"
			jvmarg="-Xmixed"
			progarg="mixed" />
		<self-test
			classname="cz.cuni.mff.d3s.perf.CompilationCounterTest"
			jvmarg="-Xint"
			progarg="int" />
		<self-test
			classname="cz.cuni.mff.d3s.perf.BenchmarkTest"
			/>
				
		<echo level="info" message="All tests passed." />
	</target>

	<target name="clean">
		<delete dir="${classes.build.dir}" />
		<delete dir="${build.dir}" />
	</target>
</project>
